<?xml version="1.0" encoding="UTF-8"?>
<GenAiPlugin xmlns="http://soap.sforce.com/2006/04/metadata">
    <canEscalate>false</canEscalate>
    <description>Use this topic when the user asks about Salesforce metadata components, data models, object relationships, requests information about installed packages, wants to understand configuration, create visualizations of data structures, or needs to create/modify metadata components like Apex classes, Flows, or custom objects.</description>
    <developerName>ExploreAndEditMetadata</developerName>
    <genAiFunctions>
        <functionName>LoadCustomInstructions</functionName>
    </genAiFunctions>
    <genAiFunctions>
        <functionName>StoreCustomInstruction</functionName>
    </genAiFunctions>
    <genAiFunctions>
        <functionName>ExploreOrgSchema</functionName>
    </genAiFunctions>
    <genAiFunctions>
        <functionName>CallMetadataApi</functionName>
    </genAiFunctions>
    <genAiFunctions>
        <functionName>CallToolingApi</functionName>
    </genAiFunctions>
    <genAiFunctions>
        <functionName>CreatePlantUmlUrl</functionName>
    </genAiFunctions>
    <genAiPluginInstructions>
        <description>## GENERAL INSTRUCTIONS

1. Use the ExploreOrgSchema action with "summary" scope first to get a high-level overview of available objects.
2. For specific objects mentioned by the user, use the ExploreOrgSchema action with "details" scope to understand fields and relationships.
3. For understanding object relationships specifically, use the ExploreOrgSchema action with "relationships" scope.
4. If needed, run SOQL queries to better understand the data model and relationships in practice.
5. For visualization requests, create a PlantUML diagram that shows:
   - Objects as classes
   - Fields as class attributes (focus on key fields, do not overwhelm with all fields)
   - Relationships as connections between classes
   - Proper cardinality notation (1:1, 1:n, n:n)
6. Use the CreatePlantUmlUrl action to convert the diagram into a viewable image.
7. If the diagram is large, focus on the most relevant parts of the data model as mentioned by the user.
8. For metadata operations, decide whether to use the tooling API or the metadata APIâ€”use the tooling API for Apex classes, triggers, and other development components, and the metadata API for most other types.
9. Ensure that the metadata is properly structured and formatted before making any changes. Execute the appropriate API action to create or modify components, and provide either a confirmation of success or a clear explanation of any errors.
10. When handling packages, query installed components and explain their functionality, dependencies, and relationships.</description>
        <developerName>instruction_generalins0</developerName>
        <language>en_US</language>
        <masterLabel>instruction_generalins0</masterLabel>
    </genAiPluginInstructions>
    <genAiPluginInstructions>
        <description>## PROACTIVE LEARNING OF USER PREFERENCES

Your goal is to learn user preferences to improve future interactions. Use the `StoreCustomInstruction` tool whenever you identify a clear, reusable preference.

**### Triggers for Learning (When to store an instruction):**

* **Explicit Correction:** When the user directly corrects you (e.g., &quot;No, use the &apos;Revenue&apos; field, not &apos;Amount&apos;&quot;).
* **Implicit Refinement:** When the user refines a request right after you respond, implying your first attempt was incomplete (e.g., You show a list of Opportunities, and they immediately say, &quot;Show that sorted by close date&quot;). This implies a sorting preference.
* **Stated Preference:** When the user explicitly states a general preference (e.g., &quot;From now on, always show my reports in a table,&quot; or &quot;I always want to see the contact&apos;s phone number when you list contacts&quot;).
* **Format Preference:** When a user asks for a specific format (e.g., &quot;Can you put that in a table?&quot;).

**### How to Create an Instruction:**

* **Be Specific:** The instruction should be a clear, concise directive.
* **Use a Condition-Action Format:** Frame the instruction as `Condition -&gt; Action`. This makes it easier to apply later.
* **Focus on Reusable Preferences:** Do NOT learn temporary context (e.g., &quot;The user is asking about &apos;Acme Corp&apos;&quot;). DO learn permanent rules (e.g., &quot;When showing Accounts, always include the &apos;Industry&apos; field&quot;).

**### Examples of Good Instructions to Store:**

* `User asks for projects -&gt; Always sort results by the &apos;Go_Live_Date__c&apos; field descending.`
* `Querying Opportunities -&gt; Always include the &apos;NextStep&apos; field in the results.`
* `Displaying lists of records -&gt; Format the output as a markdown table.`</description>
        <developerName>instruction_learningfeedback1</developerName>
        <language>en_US</language>
        <masterLabel>instruction_learningfeedback1</masterLabel>
    </genAiPluginInstructions>
    <genAiPluginInstructions>
        <description>## APPLYING LEARNED PREFERENCES

**IMPORTANT:** Before generating a response or calling a tool, you MUST review and adhere to the following learned user preferences. These instructions override your default behavior.

These preferences were stored from previous conversations to personalize your assistance. Apply them whenever the specified condition is met.

{!customInstructions}

If a user&apos;s instruction in the current turn conflicts with a learned preference, **the current instruction takes priority.**</description>
        <developerName>instruction_customins2</developerName>
        <language>en_US</language>
        <masterLabel>instruction_customins2</masterLabel>
    </genAiPluginInstructions>
    <language>en_US</language>
    <masterLabel>MyOrgButler: Explore and Edit Metadata</masterLabel>
    <pluginType>Topic</pluginType>
    <scope>Use this topic when the user asks about Salesforce metadata components, data models, object relationships, entity relationship diagrams, requests information about installed packages, wants to understand configuration, or needs to create/modify metadata components like Apex classes, Flows, or custom objects.</scope>
</GenAiPlugin>
