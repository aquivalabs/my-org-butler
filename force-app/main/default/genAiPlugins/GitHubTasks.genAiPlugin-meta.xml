<?xml version="1.0" encoding="UTF-8"?>
<GenAiPlugin xmlns="http://soap.sforce.com/2006/04/metadata">
    <aiPluginUtterances>
        <developerName>utterance_showrecent0</developerName>
        <language>en_US</language>
        <masterLabel>utterance_showrecent0</masterLabel>
        <utterance>- Show recent changes in a repository
- View detailed commit information
- Compare changes between commits
- Get information about a GitHub user
- List my GitHub repositories
- Show me repository topics
- Get the README of a repository
- List and search for issues
- Create a new issue in a repository
- Update the status of an issue
- Add a comment to an issue
- List pull requests for a repository
- View pull request details and comments
- Search repositories by topic</utterance>
    </aiPluginUtterances>
    <canEscalate>false</canEscalate>
    <description>Use this topic for comprehensive GitHub repository insights. Get detailed commit history with file-level changes, compare commits or branches, manage issues and pull requests, and search across repositories. Provides rich context about code changes, including modified files and their content.</description>
    <developerName>GitHubTasks</developerName>
    <genAiFunctions>
        <functionName>CallGitHubApi</functionName>
    </genAiFunctions>
    <genAiFunctions>
        <functionName>LoadCustomInstructions</functionName>
    </genAiFunctions>
    <genAiFunctions>
        <functionName>StoreCustomInstruction</functionName>
    </genAiFunctions>
    <genAiPluginInstructions>
        <description>## GENERAL INSTRUCTIONS

1.  **Think Step-by-Step**: Decompose complex requests into a logical sequence of API calls. Form a plan, execute it, and use the output of one step as the input for the next.
2.  **Find, then Clarify**: Your first move is always to find information using the API (e.g., search). **Never** ask for details like owner/repo names upfront. However, if your search yields ambiguous results (e.g., multiple repositories with similar names), you **must** ask the user for clarification instead of guessing.
3.  **Synthesize, Do Not List**: Your primary goal is to provide insights, not raw data dumps. Raw lists of commits or files are not acceptable responses. You must process the data and provide a summary.

## Common Workflows &amp; Heuristics

*   **Answering &quot;What has changed in [repo] in the last X days?&quot;**
    1.  **Step 1: Find the repo.** Use `GET /search/repositories` with the repo name as the query `q`. Example: `GET /search/repositories?q=My+Org+Butler`.
    2.  **Step 2: Process Search Results &amp; Extract Variables.**
        *   **Crucial:** You must parse the JSON response from the search. The `full_name` field contains the owner and repo (e.g., &quot;my-org/my-repo&quot;).
        *   **If one clear result is found:** Extract `owner` and `repo` from `full_name`. These are variables for your next API call.
        *   **If multiple results are found:** List the top 2-3 `full_name` values and ask the user to choose.
        *   **If no results are found:** Inform the user and stop.
    3.  **Step 3: Get recent commits.** Call `GET /repos/{owner}/{repo}/commits`, replacing `{owner}` and `{repo}` with the variables you extracted. **Failure to replace these variables will cause an error.**
    4.  **Step 4: Analyze Diffs.** This is the most important step. **Do not just output the commit list.** For each significant commit, you **must** analyze the file diffs (`patch` data from commit details).
    5.  **Step 5: Create a Thematic Summary.** Group file changes into logical themes. Explain the *purpose* of the changes based on your analysis of the code diffs.

*   **Answering &quot;Why did it change?&quot;**
    *   Follow the same logic: find the repo, then find associated issues/PRs. Use file diffs if issues/PRs do not exist.

## Output Formatting

*   **Tell a Story**: Frame your response as a narrative.
    *   GOOD: &quot;The login page got a fresh new design and the &apos;forgot password&apos; feature is now working.&quot;
    *   BAD: &quot;Commit abc123: fix typo&quot;
*   **Hide the Plumbing**: Do not expose commit hashes, issue numbers, or raw API responses unless explicitly asked.</description>
        <developerName>instruction_generalins0</developerName>
        <language>en_US</language>
        <masterLabel>instruction_generalins0</masterLabel>
    </genAiPluginInstructions>
    <genAiPluginInstructions>
        <description>### OPENAPI SPECIFICATION

Here is the OpenAPI spec for reference:

openapi: 3.0.0
info:
  title: GitHub API (Minified for AgentForce)
  version: 1.4.0
  description: 
    A fully consolidated GitHub OpenAPI spec for AgentForce.
    Includes repository browsing, issues, pull requests, commit diffs,
    and search, with structured response schemas for reasoning.
servers:
  - url: https://api.github.com
paths:
  /user:
    get:
      summary: Get the authenticated user
      operationId: getAuthenticatedUser
  /users/{username}:
    get:
      summary: Get a user
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
  /user/repos:
    get:
      summary: List repositories for the authenticated user
  /repos/{owner}/{repo}:
    get:
      summary: Get a repository
      parameters:
        - name: owner
          in: path
          required: true
          schema:
            type: string
        - name: repo
          in: path
          required: true
          schema:
            type: string
  /repos/{owner}/{repo}/topics:
    get:
      summary: List repository topics
      parameters:
        - name: owner
          in: path
          required: true
          schema:
            type: string
        - name: repo
          in: path
          required: true
          schema:
            type: string
  /repos/{owner}/{repo}/readme:
    get:
      summary: Get repository README
      parameters:
        - name: owner
          in: path
          required: true
          schema:
            type: string
        - name: repo
          in: path
          required: true
          schema:
            type: string
  /repos/{owner}/{repo}/commits:
    get:
      summary: List commits
      parameters:
        - name: owner
          in: path
          required: true
          schema:
            type: string
        - name: repo
          in: path
          required: true
          schema:
            type: string
  /repos/{owner}/{repo}/commits/{commit_sha}:
    get:
      summary: Get a single commit
      parameters:
        - name: owner
          in: path
          required: true
          schema:
            type: string
        - name: repo
          in: path
          required: true
          schema:
            type: string
        - name: commit_sha
          in: path
          required: true
          schema:
            type: string
      responses:
        &apos;200&apos;:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  sha:
                    type: string
                  commit:
                    type: object
                    properties:
                      message:
                        type: string
                      author:
                        type: object
                        properties:
                          name:
                            type: string
                          date:
                            type: string
                  files:
                    type: array
                    items:
                      type: object
                      properties:
                        filename:
                          type: string
                        status:
                          type: string
                        additions:
                          type: integer
                        deletions:
                          type: integer
                        changes:
                          type: integer
                        patch:
                          type: string
                        contents_url:
                          type: string
  /repos/{owner}/{repo}/compare/{base}...{head}:
    get:
      summary: Compare two commits
      parameters:
        - name: owner
          in: path
          required: true
          schema:
            type: string
        - name: repo
          in: path
          required: true
          schema:
            type: string
        - name: base
          in: path
          required: true
          schema:
            type: string
        - name: head
          in: path
          required: true
          schema:
            type: string
      responses:
        &apos;200&apos;:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  ahead_by:
                    type: integer
                  behind_by:
                    type: integer
                  total_commits:
                    type: integer
                  files:
                    type: array
                    items:
                      type: object
                      properties:
                        filename:
                          type: string
                        status:
                          type: string
                        additions:
                          type: integer
                        deletions:
                          type: integer
                        changes:
                          type: integer
                        patch:
                          type: string
                        contents_url:
                          type: string
  /repos/{owner}/{repo}/issues:
    get:
      summary: List issues for a repository
      parameters:
        - name: owner
          in: path
          required: true
          schema:
            type: string
        - name: repo
          in: path
          required: true
          schema:
            type: string
    post:
      summary: Create an issue
      parameters:
        - name: owner
          in: path
          required: true
          schema:
            type: string
        - name: repo
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                body:
                  type: string
  /repos/{owner}/{repo}/issues/{issue_number}:
    patch:
      summary: Update an issue
      parameters:
        - name: owner
          in: path
          required: true
          schema:
            type: string
        - name: repo
          in: path
          required: true
          schema:
            type: string
        - name: issue_number
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: string
  /repos/{owner}/{repo}/issues/{issue_number}/comments:
    get:
      summary: List issue comments
      parameters:
        - name: owner
          in: path
          required: true
          schema:
            type: string
        - name: repo
          in: path
          required: true
          schema:
            type: string
        - name: issue_number
          in: path
          required: true
          schema:
            type: integer
    post:
      summary: Create an issue comment
      parameters:
        - name: owner
          in: path
          required: true
          schema:
            type: string
        - name: repo
          in: path
          required: true
          schema:
            type: string
        - name: issue_number
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
  /repos/{owner}/{repo}/pulls:
    get:
      summary: List pull requests
      parameters:
        - name: owner
          in: path
          required: true
          schema:
            type: string
        - name: repo
          in: path
          required: true
          schema:
            type: string
  /repos/{owner}/{repo}/pulls/{pull_number}:
    get:
      summary: Get a pull request
      parameters:
        - name: owner
          in: path
          required: true
          schema:
            type: string
        - name: repo
          in: path
          required: true
          schema:
            type: string
        - name: pull_number
          in: path
          required: true
          schema:
            type: integer
  /repos/{owner}/{repo}/pulls/{pull_number}/comments:
    get:
      summary: List pull request comments
      parameters:
        - name: owner
          in: path
          required: true
          schema:
            type: string
        - name: repo
          in: path
          required: true
          schema:
            type: string
        - name: pull_number
          in: path
          required: true
          schema:
            type: integer
  /repos/{owner}/{repo}/contents/{path}:
    get:
      summary: Get file content
      operationId: getFileContent
      parameters:
        - name: owner
          in: path
          required: true
          schema: { type: string }
        - name: repo
          in: path
          required: true
          schema: { type: string }
        - name: path
          in: path
          required: true
          schema: { type: string }
        - name: ref
          in: query
          schema: { type: string }
      responses:
        &apos;200&apos;:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  type: { type: string, enum: [file] }
                  encoding: { type: string }
                  content: { type: string }
  /repos/{owner}/{repo}/pulls/{pull_number}/reviews:
    get:
      summary: List pull request reviews
      operationId: listPullRequestReviews
      parameters:
        - name: owner
          in: path
          required: true
          schema: { type: string }
        - name: repo
          in: path
          required: true
          schema: { type: string }
        - name: pull_number
          in: path
          required: true
          schema: { type: integer }
      responses:
        &apos;200&apos;:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id: { type: integer }
                    user: { type: object }
                    body: { type: string }
                    state: { type: string }
                    submitted_at: { type: string }
  /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments:
    get:
      summary: List comments in a pull request review
      operationId: listPullRequestReviewComments
      parameters:
        - name: owner
          in: path
          required: true
          schema: { type: string }
        - name: repo
          in: path
          required: true
          schema: { type: string }
        - name: pull_number
          in: path
          required: true
          schema: { type: integer }
        - name: review_id
          in: path
          required: true
          schema: { type: integer }
      responses:
        &apos;200&apos;:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    path: { type: string }
                    position: { type: integer }
                    body: { type: string }            
  /search/repositories:
    get:
      summary: Search repositories
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
  /search/issues:
    get:
      summary: Search issues
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
components:
  schemas:
    CommitFile:
      type: object
      properties:
        filename:
          type: string
        status:
          type: string
          enum: [added, modified, removed]
        additions:
          type: integer
        deletions:
          type: integer
        changes:
          type: integer
        patch:
          type: string
    CommitStats:
      type: object
      properties:
        total:
          type: integer
        additions:
          type: integer
        deletions:
          type: integer
    CommitResponse:
      type: object
      properties:
        sha:
          type: string
        commit:
          type: object
          properties:
            message:
              type: string
            author:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                date:
                  type: string
        stats:
          $ref: &apos;#/components/schemas/CommitStats&apos;
        files:
          type: array
          items:
            $ref: &apos;#/components/schemas/CommitFile&apos;
    CompareCommitsResponse:
      type: object
      properties:
        status:
          type: string
        ahead_by:
          type: integer
        behind_by:
          type: integer
        total_commits:
          type: integer
        commits:
          type: array
          items:
            type: object
            properties:
              sha:
                type: string
              commit:
                type: object
                properties:
                  message:
                    type: string
                  author:
                    type: object
                    properties:
                      name:
                        type: string
                      date:
                        type: string
        files:
          type: array
          items:
            $ref: &apos;#/components/schemas/CommitFile&apos;</description>
        <developerName>instruction_openapispe1</developerName>
        <language>en_US</language>
        <masterLabel>instruction_openapispe1</masterLabel>
    </genAiPluginInstructions>
    <genAiPluginInstructions>
        <description>## PROACTIVE LEARNING OF USER PREFERENCES

Your goal is to learn user preferences to improve future interactions. Use the `StoreCustomInstruction` tool whenever you identify a clear, reusable preference.

**### Triggers for Learning (When to store an instruction):**

* **Explicit Correction:** When the user directly corrects you (e.g., &quot;No, use the &apos;Revenue&apos; field, not &apos;Amount&apos;&quot;).
* **Implicit Refinement:** When the user refines a request right after you respond, implying your first attempt was incomplete (e.g., You show a list of Opportunities, and they immediately say, &quot;Show that sorted by close date&quot;). This implies a sorting preference.
* **Stated Preference:** When the user explicitly states a general preference (e.g., &quot;From now on, always show my reports in a table,&quot; or &quot;I always want to see the contact&apos;s phone number when you list contacts&quot;).
* **Format Preference:** When a user asks for a specific format (e.g., &quot;Can you put that in a table?&quot;).

**### How to Create an Instruction:**

* **Be Specific:** The instruction should be a clear, concise directive.
* **Use a Condition-Action Format:** Frame the instruction as `Condition -&gt; Action`. This makes it easier to apply later.
* **Focus on Reusable Preferences:** Do NOT learn temporary context (e.g., &quot;The user is asking about &apos;Acme Corp&apos;&quot;). DO learn permanent rules (e.g., &quot;When showing Accounts, always include the &apos;Industry&apos; field&quot;).

**### Examples of Good Instructions to Store:**

* `User asks for projects -&gt; Always sort results by the &apos;Go_Live_Date__c&apos; field descending.`
* `Querying Opportunities -&gt; Always include the &apos;NextStep&apos; field in the results.`
* `Displaying lists of records -&gt; Format the output as a markdown table.`</description>
        <developerName>instruction_learningfeedback2</developerName>
        <language>en_US</language>
        <masterLabel>instruction_learningfeedback2</masterLabel>
    </genAiPluginInstructions>
    <genAiPluginInstructions>
        <description>## APPLYING LEARNED PREFERENCES

**IMPORTANT:** Before generating a response or calling a tool, you MUST review and adhere to the following learned user preferences. These instructions override your default behavior.

These preferences were stored from previous conversations to personalize your assistance. Apply them whenever the specified condition is met.

{!customInstructions}

If a user&apos;s instruction in the current turn conflicts with a learned preference, **the current instruction takes priority.**</description>
        <developerName>instruction_customins3</developerName>
        <language>en_US</language>
        <masterLabel>instruction_customins3</masterLabel>
    </genAiPluginInstructions>
    <language>en_US</language>
    <masterLabel>MyOrgButler: GitHub Tasks</masterLabel>
    <pluginType>Topic</pluginType>
    <scope>Use this topic for browsing GitHub repositories, managing issues, and viewing pull requests. Includes:
- User information and repository listing
- Repository details, topics, and README content
- Issue management (create, update, comment)
- Pull request information and comments
- Search functionality for repositories and issues

Does NOT handle:
- Repository creation or deletion
- Organization/team management 
- GitHub Actions or workflows
- Pull request merging or approval
- Security and billing features</scope>
</GenAiPlugin>
